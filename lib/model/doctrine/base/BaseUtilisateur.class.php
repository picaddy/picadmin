<?php

/**
 * BaseUtilisateur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $utilisateur_nom
 * @property string $utilisateur_prenom
 * @property string $utilisateur_email
 * @property string $utilisateur_pseudo
 * @property string $utilisateur_motdepasse
 * @property string $utilisateur_photo
 * @property Doctrine_Collection $UtilisateurToGroupe
 * @property Doctrine_Collection $TacheToUtilisateur
 * @property Doctrine_Collection $ProjetToUtilisateur
 * @property Doctrine_Collection $UtilisateurToCommentaire
 * @property Doctrine_Collection $UtilisateurToIdee
 * @property Doctrine_Collection $UtilisateurToBugBis
 * @property Doctrine_Collection $UtilisateurToNote
 * @property Doctrine_Collection $UtilisateurToDocument
 * 
 * @method string              getUtilisateurNom()           Returns the current record's "utilisateur_nom" value
 * @method string              getUtilisateurPrenom()        Returns the current record's "utilisateur_prenom" value
 * @method string              getUtilisateurEmail()         Returns the current record's "utilisateur_email" value
 * @method string              getUtilisateurPseudo()        Returns the current record's "utilisateur_pseudo" value
 * @method string              getUtilisateurMotdepasse()    Returns the current record's "utilisateur_motdepasse" value
 * @method string              getUtilisateurPhoto()         Returns the current record's "utilisateur_photo" value
 * @method Doctrine_Collection getUtilisateurToGroupe()      Returns the current record's "UtilisateurToGroupe" collection
 * @method Doctrine_Collection getTacheToUtilisateur()       Returns the current record's "TacheToUtilisateur" collection
 * @method Doctrine_Collection getProjetToUtilisateur()      Returns the current record's "ProjetToUtilisateur" collection
 * @method Doctrine_Collection getUtilisateurToCommentaire() Returns the current record's "UtilisateurToCommentaire" collection
 * @method Doctrine_Collection getUtilisateurToIdee()        Returns the current record's "UtilisateurToIdee" collection
 * @method Doctrine_Collection getUtilisateurToBugBis()      Returns the current record's "UtilisateurToBugBis" collection
 * @method Doctrine_Collection getUtilisateurToNote()        Returns the current record's "UtilisateurToNote" collection
 * @method Doctrine_Collection getUtilisateurToDocument()    Returns the current record's "UtilisateurToDocument" collection
 * @method Utilisateur         setUtilisateurNom()           Sets the current record's "utilisateur_nom" value
 * @method Utilisateur         setUtilisateurPrenom()        Sets the current record's "utilisateur_prenom" value
 * @method Utilisateur         setUtilisateurEmail()         Sets the current record's "utilisateur_email" value
 * @method Utilisateur         setUtilisateurPseudo()        Sets the current record's "utilisateur_pseudo" value
 * @method Utilisateur         setUtilisateurMotdepasse()    Sets the current record's "utilisateur_motdepasse" value
 * @method Utilisateur         setUtilisateurPhoto()         Sets the current record's "utilisateur_photo" value
 * @method Utilisateur         setUtilisateurToGroupe()      Sets the current record's "UtilisateurToGroupe" collection
 * @method Utilisateur         setTacheToUtilisateur()       Sets the current record's "TacheToUtilisateur" collection
 * @method Utilisateur         setProjetToUtilisateur()      Sets the current record's "ProjetToUtilisateur" collection
 * @method Utilisateur         setUtilisateurToCommentaire() Sets the current record's "UtilisateurToCommentaire" collection
 * @method Utilisateur         setUtilisateurToIdee()        Sets the current record's "UtilisateurToIdee" collection
 * @method Utilisateur         setUtilisateurToBugBis()      Sets the current record's "UtilisateurToBugBis" collection
 * @method Utilisateur         setUtilisateurToNote()        Sets the current record's "UtilisateurToNote" collection
 * @method Utilisateur         setUtilisateurToDocument()    Sets the current record's "UtilisateurToDocument" collection
 * 
 * @package    adminpicaddy
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUtilisateur extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('utilisateur');
        $this->hasColumn('utilisateur_nom', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('utilisateur_prenom', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('utilisateur_email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('utilisateur_pseudo', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('utilisateur_motdepasse', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('utilisateur_photo', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UtilisateurToGroupe', array(
             'local' => 'id',
             'foreign' => 'utilisateur_id'));

        $this->hasMany('TacheToUtilisateur', array(
             'local' => 'id',
             'foreign' => 'utilisateur_id'));

        $this->hasMany('ProjetToUtilisateur', array(
             'local' => 'id',
             'foreign' => 'utilisateur_id'));

        $this->hasMany('Commentaire as UtilisateurToCommentaire', array(
             'local' => 'id',
             'foreign' => 'commentaire_utilisateur_id'));

        $this->hasMany('Idee as UtilisateurToIdee', array(
             'local' => 'id',
             'foreign' => 'idee_utilisateur_id'));

        $this->hasMany('Bug as UtilisateurToBugBis', array(
             'local' => 'id',
             'foreign' => 'bug_referent_id'));

        $this->hasMany('Note as UtilisateurToNote', array(
             'local' => 'id',
             'foreign' => 'note_utilisateur_id'));

        $this->hasMany('Document as UtilisateurToDocument', array(
             'local' => 'id',
             'foreign' => 'document_utilisateur_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}